<?php

namespace wdmg\translations\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use wdmg\translations\models\Translations;
use wdmg\translations\models\Sources;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * TranslationsEdit represents the model behind the search form of `wdmg\pages\translations\Translations`.
 */
class TranslationsEdit extends Translations
{
    public $category;
    public $alias;
    public $message;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $rules = [
            [['id'], 'integer'],
            [['category', 'language', 'alias', 'message', 'translation'], 'required'],
            ['category', 'string', 'max' => 255],
            ['language', 'string', 'max' => 16],
            ['message', 'string'],
            ['translation', 'string'],
            ['alias', 'checkUniqueAlias', 'skipOnEmpty' => false, 'skipOnError' => false],
            ['alias', 'string', 'max' => 32],
            ['alias', 'match', 'pattern' => '/^[A-Za-z0-9\-\_]+$/', 'message' => Yii::t('app/modules/translations','It allowed only Latin alphabet, numbers and the «-», «_» characters.')],
            [['created_at', 'updated_at'], 'safe'],

        ];
        return ArrayHelper::merge($rules, parent::rules());
    }

    public function checkUniqueAlias()
    {
        if (is_null($sources = Sources::findOne(['id' => $this->id, 'alias' => $this->alias]))) {
            if (!is_null($this->alias) && !is_null($sources = Sources::findOne(['alias' => $this->alias])))
                $this->addError('alias', Yii::t('app/modules/translations', 'Alias key must be unique.'));
        }
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Return a model instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveRecord
     */
    public function search($params)
    {
        if (!empty($params)) {
            $model = self::find()->joinWith([
                'sources' => function (\yii\db\ActiveQuery $query) use ($params) {

                    if (!empty($params['id']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.id' => intval($params['id']),
                        ]);

                    if (!empty($params['language']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.language' => $params['language'],
                        ]);

                    if (!empty($params['category']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.category' => $params['category'],
                        ]);

                    if (!empty($params['alias']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.alias' => $params['alias'],
                        ]);

                    if (!empty($params['message']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.message' => $params['message'],
                        ]);

                    if (!empty($params['created_by']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.created_by' => intval($params['created_by']),
                        ]);

                    if (!empty($params['updated_by']))
                        $query->andFilterWhere([
                            '{{%trans_sources}}.updated_by' => intval($params['updated_by']),
                        ]);

                }
            ])->one();
            $model->category = $model->sources->category;
            $model->alias = $model->sources->alias;
            $model->message = $model->sources->message;
        } else {
            return null;
        }

        if (!($this->load($params) && $this->validate()))
            return $model;

        if (!$this->validate())
            return $model;

        return $model;
    }

}
